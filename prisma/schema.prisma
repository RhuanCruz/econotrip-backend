generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  login     String    @unique @db.VarChar(255)
  email     String    @unique @db.VarChar(255)
  fullname  String?   @db.VarChar(255)
  phone     String?   @db.VarChar(16)
  cpf       String?   @unique @db.VarChar(14)
  avatar    String?   @db.VarChar(1024)
  birthdate DateTime? @db.Date
  gender    String?   @db.VarChar(16)
  admin     Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  roles                    UserRole[]
  passwords                UserPassword[]
  permissions              UserPermission[]
  userActionLog            UserActionLog[]
  flightOfferSearchHistory FlightOfferSearchHistory[]
  radars                   Radar[]
  Planner                  Planner[]
  pushSubscriptions        UserPushSubscription[]

  @@map("user")
}

model UserPassword {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  passwordHash String   @map("password_hash") @db.VarChar(255)
  current      Boolean
  createdAt    DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, current])
  @@map("user_password")
}

model Role {
  id          Int      @id @default(autoincrement())
  short       String   @unique @db.VarChar(255)
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(1024)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  users       UserRole[]
  permissions RolePermission[]

  @@map("role")
}

model UserRole {
  userId    Int      @map("user_id")
  roleId    Int      @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_role")
}

model UserPermission {
  userId       Int      @map("user_id")
  permissionId Int      @map("permission_id")
  createdAt    DateTime @default(now()) @map("created_at")

  user       User       @relation(fields: [userId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@id([userId, permissionId])
  @@map("user_permission")
}

model Permission {
  id          Int      @id @default(autoincrement())
  short       String   @unique @db.VarChar(255)
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(1024)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  users       UserPermission[]
  permissions RolePermission[]

  @@map("permission")
}

model RolePermission {
  roleId       Int      @map("role_id")
  permissionId Int      @map("permission_id")
  createdAt    DateTime @default(now()) @map("created_at")

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permission")
}

model UserAction {
  id            Int             @id @default(autoincrement())
  short         String          @unique @db.VarChar(255)
  name          String          @db.VarChar(255)
  description   String?         @db.VarChar(1024)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  userActionLog UserActionLog[]

  @@map("user_action")
}

model UserActionLog {
  id        Int      @id @default(autoincrement())
  actionId  Int      @map("action_id")
  userId    Int      @map("user_id")
  timestamp DateTime @default(now())
  ip        String   @db.VarChar(32)
  payload   Json

  user   User       @relation(fields: [userId], references: [id])
  action UserAction @relation(fields: [actionId], references: [id])

  @@map("user_action_log")
}

model FlightOfferSearchHistory {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  search    Json
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("flight_offer_search_history")
}

model Location {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(255)
  country      String   @map("country_code") @db.VarChar(2)
  cityCode     String   @map("city_code") @db.VarChar(255)
  cityName     String   @map("city_name") @db.VarChar(255)
  iata         String   @map("iata_code") @db.VarChar(3)
  timezone     String?  @db.VarChar(32)
  type         String?  @db.VarChar(8)
  cordinateLon Float?   @map("cordinate_lon") @db.DoublePrecision
  cordinateLat Float?   @map("cordinate_lat") @db.DoublePrecision
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("location")
}

model Radar {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  start       DateTime?
  end         DateTime?
  origin      String    @db.VarChar(32)
  destination String    @db.VarChar(32)
  value       Float?
  type        String?   @db.VarChar(32)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("radar")
}

model UserPushSubscription {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique @map("user_id")
  subscription Json
  createdAt    DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("user_push_subscription")
}

model Planner {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  start       DateTime
  end         DateTime
  destination String[] @db.VarChar(255)
  content     Json
  current     Boolean  @default(false)
  status      String   @default("DRAFT") @db.VarChar(16)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("planner")
}
